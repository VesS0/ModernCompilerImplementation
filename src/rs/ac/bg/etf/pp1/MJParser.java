
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Aug 28 23:20:52 CEST 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.MJParser.SCOPE;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Aug 28 23:20:52 CEST 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\070\010\000\002\002\004\000\002\060" +
    "\004\000\002\060\002\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\043\006\000\002\044\005\000" +
    "\002\044\003\000\002\042\005\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\036\005\000\002\037" +
    "\005\000\002\037\003\000\002\040\005\000\002\040\003" +
    "\000\002\073\003\000\002\004\004\000\002\004\002\000" +
    "\002\003\004\000\002\003\003\000\002\076\002\000\002" +
    "\002\012\000\002\061\004\000\002\061\002\000\002\013" +
    "\004\000\002\013\002\000\002\012\005\000\002\014\005" +
    "\000\002\014\003\000\002\010\005\000\002\010\002\000" +
    "\002\011\004\000\002\011\002\000\002\077\002\000\002" +
    "\007\015\000\002\062\003\000\002\062\002\000\002\074" +
    "\003\000\002\074\003\000\002\035\010\000\002\046\003" +
    "\000\002\046\004\000\002\046\003\000\002\046\002\000" +
    "\002\047\005\000\002\047\003\000\002\045\006\000\002" +
    "\045\004\000\002\051\004\000\002\051\002\000\002\050" +
    "\005\000\002\050\003\000\002\050\013\000\002\050\004" +
    "\000\002\050\004\000\002\050\004\000\002\050\005\000" +
    "\002\050\007\000\002\050\010\000\002\050\005\000\002" +
    "\052\007\000\002\052\011\000\002\063\004\000\002\063" +
    "\002\000\002\020\004\000\002\020\002\000\002\056\003" +
    "\000\002\056\002\000\002\022\004\000\002\022\005\000" +
    "\002\022\003\000\002\022\003\000\002\066\003\000\002" +
    "\066\002\000\002\065\005\000\002\065\003\000\002\017" +
    "\004\000\002\021\004\000\002\021\002\000\002\023\004" +
    "\000\002\023\005\000\002\053\005\000\002\053\003\000" +
    "\002\054\005\000\002\054\003\000\002\055\003\000\002" +
    "\055\005\000\002\071\004\000\002\071\003\000\002\030" +
    "\005\000\002\030\003\000\002\027\005\000\002\027\003" +
    "\000\002\072\005\000\002\072\003\000\002\034\005\000" +
    "\002\034\003\000\002\075\003\000\002\075\006\000\002" +
    "\075\003\000\002\075\003\000\002\075\003\000\002\075" +
    "\004\000\002\075\007\000\002\075\005\000\002\064\003" +
    "\000\002\064\003\000\002\064\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\067\003\000\002\024\003\000\002\024" +
    "\003\000\002\025\003\000\002\025\003\000\002\026\003" +
    "\000\002\026\003\000\002\031\003\000\002\031\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\004\016\005\001\002\000\004\002\333\001" +
    "\002\000\004\064\006\001\002\000\012\005\ufffe\006\ufffe" +
    "\023\ufffe\064\ufffe\001\002\000\012\005\017\006\020\023" +
    "\012\064\013\001\002\000\004\064\114\001\002\000\012" +
    "\005\uffff\006\uffff\023\uffff\064\uffff\001\002\000\012\021" +
    "\uffdd\022\uffdd\024\uffdd\064\uffdd\001\002\000\066\023\uffee" +
    "\025\uffee\026\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee" +
    "\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee\054" +
    "\uffee\055\uffee\056\uffee\057\uffee\060\uffee\064\uffee\001\002" +
    "\000\012\005\ufffb\006\ufffb\023\ufffb\064\ufffb\001\002\000" +
    "\012\005\ufffd\006\ufffd\023\ufffd\064\ufffd\001\002\000\012" +
    "\005\ufffc\006\ufffc\023\ufffc\064\ufffc\001\002\000\004\064" +
    "\035\001\002\000\004\064\013\001\002\000\004\064\024" +
    "\001\002\000\006\056\033\057\032\001\002\000\006\056" +
    "\ufff8\057\ufff8\001\002\000\004\036\025\001\002\000\010" +
    "\061\030\062\031\063\026\001\002\000\006\056\ufff4\057" +
    "\ufff4\001\002\000\006\056\ufff7\057\ufff7\001\002\000\006" +
    "\056\ufff6\057\ufff6\001\002\000\006\056\ufff5\057\ufff5\001" +
    "\002\000\004\064\024\001\002\000\012\005\ufffa\006\ufffa" +
    "\023\ufffa\064\ufffa\001\002\000\006\056\ufff9\057\ufff9\001" +
    "\002\000\006\011\037\023\uffe6\001\002\000\004\023\041" +
    "\001\002\000\004\064\013\001\002\000\004\023\uffe7\001" +
    "\002\000\012\021\uffe9\023\uffe9\024\uffe9\064\uffe9\001\002" +
    "\000\012\021\uffec\023\uffec\024\uffec\064\uffec\001\002\000" +
    "\012\021\045\023\044\024\uffdf\064\013\001\002\000\012" +
    "\021\uffdd\022\uffdd\024\uffdd\064\uffdd\001\002\000\004\064" +
    "\013\001\002\000\012\021\uffed\023\uffed\024\uffed\064\uffed" +
    "\001\002\000\012\021\uffea\023\uffea\024\uffea\064\uffea\001" +
    "\002\000\004\024\051\001\002\000\012\005\uffe8\006\uffe8" +
    "\023\uffe8\064\uffe8\001\002\000\012\021\uffeb\023\uffeb\024" +
    "\uffeb\064\uffeb\001\002\000\012\021\054\022\uffd9\024\055" +
    "\064\uffd9\001\002\000\006\022\uffda\064\uffda\001\002\000" +
    "\004\024\uffe0\001\002\000\012\021\uffde\022\uffde\024\uffde" +
    "\064\uffde\001\002\000\006\022\062\064\013\001\002\000" +
    "\004\064\uffd8\001\002\000\004\064\063\001\002\000\004" +
    "\064\uffd7\001\002\000\004\027\064\001\002\000\010\030" +
    "\uffd2\057\065\064\013\001\002\000\004\064\013\001\002" +
    "\000\004\064\077\001\002\000\004\030\106\001\002\000" +
    "\006\030\uffd5\057\073\001\002\000\004\030\uffd3\001\002" +
    "\000\006\030\uffd0\057\uffd0\001\002\000\004\064\013\001" +
    "\002\000\004\030\uffd4\001\002\000\006\060\100\064\077" +
    "\001\002\000\006\030\uffd1\057\uffd1\001\002\000\010\025" +
    "\104\030\uffce\057\uffce\001\002\000\004\060\101\001\002" +
    "\000\004\060\102\001\002\000\004\064\103\001\002\000" +
    "\004\030\uffd6\001\002\000\004\026\105\001\002\000\006" +
    "\030\uffcf\057\uffcf\001\002\000\006\023\uffe4\064\uffe4\001" +
    "\002\000\006\023\110\064\013\001\002\000\026\004\uffdc" +
    "\007\uffdc\012\uffdc\013\uffdc\015\uffdc\017\uffdc\020\uffdc\023" +
    "\uffdc\024\uffdc\064\uffdc\001\002\000\004\064\114\001\002" +
    "\000\006\023\uffe5\064\uffe5\001\002\000\006\056\121\057" +
    "\120\001\002\000\010\025\116\056\uffef\057\uffef\001\002" +
    "\000\006\056\uffe1\057\uffe1\001\002\000\004\026\117\001" +
    "\002\000\006\056\ufff0\057\ufff0\001\002\000\004\064\114" +
    "\001\002\000\006\023\uffe3\064\uffe3\001\002\000\006\056" +
    "\uffe2\057\uffe2\001\002\000\026\004\uffcc\007\uffcc\012\uffcc" +
    "\013\uffcc\015\uffcc\017\uffcc\020\uffcc\023\uffcc\024\uffcc\064" +
    "\uffcc\001\002\000\026\004\141\007\136\012\130\013\132" +
    "\015\135\017\125\020\137\023\126\024\140\064\127\001" +
    "\002\000\004\027\317\001\002\000\026\004\uffcc\007\uffcc" +
    "\012\uffcc\013\uffcc\015\uffcc\017\uffcc\020\uffcc\023\uffcc\024" +
    "\uffcc\064\uffcc\001\002\000\072\025\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf" +
    "\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053" +
    "\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\001\002" +
    "\000\004\027\273\001\002\000\024\027\266\036\263\037" +
    "\201\040\177\041\165\042\166\043\172\052\265\053\264" +
    "\001\002\000\004\027\232\001\002\000\026\004\uffcd\007" +
    "\uffcd\012\uffcd\013\uffcd\015\uffcd\017\uffcd\020\uffcd\023\uffcd" +
    "\024\uffcd\064\uffcd\001\002\000\030\004\uffca\007\uffca\010" +
    "\uffca\012\uffca\013\uffca\015\uffca\017\uffca\020\uffca\023\uffca" +
    "\024\uffca\064\uffca\001\002\000\004\027\223\001\002\000" +
    "\004\056\222\001\002\000\022\014\145\027\157\032\153" +
    "\056\151\061\144\062\160\063\147\064\127\001\002\000" +
    "\012\021\uffdb\022\uffdb\024\uffdb\064\uffdb\001\002\000\004" +
    "\056\142\001\002\000\030\004\uffc8\007\uffc8\010\uffc8\012" +
    "\uffc8\013\uffc8\015\uffc8\017\uffc8\020\uffc8\023\uffc8\024\uffc8" +
    "\064\uffc8\001\002\000\032\026\uffa5\030\uffa5\044\uffa5\045" +
    "\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\054\uffa5\055\uffa5" +
    "\056\uffa5\057\uffa5\001\002\000\056\026\uff98\030\uff98\031" +
    "\uff98\032\uff98\033\uff98\034\uff98\035\uff98\037\uff98\040\uff98" +
    "\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047" +
    "\uff98\050\uff98\051\uff98\054\uff98\055\uff98\056\uff98\057\uff98" +
    "\001\002\000\004\064\013\001\002\000\060\026\uff9c\027" +
    "\207\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c" +
    "\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045" +
    "\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\054\uff9c\055\uff9c" +
    "\056\uff9c\057\uff9c\001\002\000\056\026\uff9a\030\uff9a\031" +
    "\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\037\uff9a\040\uff9a" +
    "\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047" +
    "\uff9a\050\uff9a\051\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a" +
    "\001\002\000\042\026\uffa3\030\uffa3\031\202\032\200\037" +
    "\201\040\177\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3" +
    "\051\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\001\002\000" +
    "\030\004\uffc6\007\uffc6\010\uffc6\012\uffc6\013\uffc6\015\uffc6" +
    "\017\uffc6\020\uffc6\023\uffc6\024\uffc6\064\uffc6\001\002\000" +
    "\004\056\176\001\002\000\016\014\145\027\157\061\144" +
    "\062\160\063\147\064\127\001\002\000\056\026\uff9f\030" +
    "\uff9f\031\uff9f\032\uff9f\033\167\034\170\035\163\037\uff9f" +
    "\040\uff9f\041\165\042\166\043\172\044\uff9f\045\uff9f\046" +
    "\uff9f\047\uff9f\050\uff9f\051\uff9f\054\uff9f\055\uff9f\056\uff9f" +
    "\057\uff9f\001\002\000\042\026\uffa1\030\uffa1\031\uffa1\032" +
    "\uffa1\037\uffa1\040\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1" +
    "\050\uffa1\051\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\001" +
    "\002\000\056\026\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d" +
    "\034\uff9d\035\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043" +
    "\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d" +
    "\054\uff9d\055\uff9d\056\uff9d\057\uff9d\001\002\000\020\014" +
    "\145\027\157\032\153\061\144\062\160\063\147\064\127" +
    "\001\002\000\056\026\uff99\030\uff99\031\uff99\032\uff99\033" +
    "\uff99\034\uff99\035\uff99\037\uff99\040\uff99\041\uff99\042\uff99" +
    "\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051" +
    "\uff99\054\uff99\055\uff99\056\uff99\057\uff99\001\002\000\004" +
    "\030\162\001\002\000\056\026\uff95\030\uff95\031\uff95\032" +
    "\uff95\033\uff95\034\uff95\035\uff95\037\uff95\040\uff95\041\uff95" +
    "\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050" +
    "\uff95\051\uff95\054\uff95\055\uff95\056\uff95\057\uff95\001\002" +
    "\000\016\014\uff81\027\uff81\061\uff81\062\uff81\063\uff81\064" +
    "\uff81\001\002\000\016\014\145\027\157\061\144\062\160" +
    "\063\147\064\127\001\002\000\020\014\uff80\027\uff80\032" +
    "\uff80\061\uff80\062\uff80\063\uff80\064\uff80\001\002\000\020" +
    "\014\uff7f\027\uff7f\032\uff7f\061\uff7f\062\uff7f\063\uff7f\064" +
    "\uff7f\001\002\000\016\014\uff83\027\uff83\061\uff83\062\uff83" +
    "\063\uff83\064\uff83\001\002\000\016\014\uff82\027\uff82\061" +
    "\uff82\062\uff82\063\uff82\064\uff82\001\002\000\016\014\145" +
    "\027\157\061\144\062\160\063\147\064\127\001\002\000" +
    "\020\014\uff7e\027\uff7e\032\uff7e\061\uff7e\062\uff7e\063\uff7e" +
    "\064\uff7e\001\002\000\056\026\uff9e\030\uff9e\031\uff9e\032" +
    "\uff9e\033\uff9e\034\uff9e\035\uff9e\037\uff9e\040\uff9e\041\uff9e" +
    "\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050" +
    "\uff9e\051\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\001\002" +
    "\000\042\026\uffa0\030\uffa0\031\uffa0\032\uffa0\037\uffa0\040" +
    "\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0" +
    "\054\uffa0\055\uffa0\056\uffa0\057\uffa0\001\002\000\032\026" +
    "\uffa6\030\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6" +
    "\051\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\001\002\000" +
    "\030\004\uffc5\007\uffc5\010\uffc5\012\uffc5\013\uffc5\015\uffc5" +
    "\017\uffc5\020\uffc5\023\uffc5\024\uffc5\064\uffc5\001\002\000" +
    "\020\014\uff86\027\uff86\032\uff86\061\uff86\062\uff86\063\uff86" +
    "\064\uff86\001\002\000\016\014\uff88\027\uff88\061\uff88\062" +
    "\uff88\063\uff88\064\uff88\001\002\000\020\014\uff87\027\uff87" +
    "\032\uff87\061\uff87\062\uff87\063\uff87\064\uff87\001\002\000" +
    "\016\014\uff89\027\uff89\061\uff89\062\uff89\063\uff89\064\uff89" +
    "\001\002\000\016\014\145\027\157\061\144\062\160\063" +
    "\147\064\127\001\002\000\016\014\145\027\157\061\144" +
    "\062\160\063\147\064\127\001\002\000\042\026\uffa2\030" +
    "\uffa2\031\uffa2\032\uffa2\037\uffa2\040\uffa2\044\uffa2\045\uffa2" +
    "\046\uffa2\047\uffa2\050\uffa2\051\uffa2\054\uffa2\055\uffa2\056" +
    "\uffa2\057\uffa2\001\002\000\032\026\uffa4\030\uffa4\044\uffa4" +
    "\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\054\uffa4\055" +
    "\uffa4\056\uffa4\057\uffa4\001\002\000\022\014\145\027\157" +
    "\030\uffb4\032\153\061\144\062\160\063\147\064\127\001" +
    "\002\000\006\030\uffb5\057\214\001\002\000\004\030\213" +
    "\001\002\000\006\030\uffb2\057\uffb2\001\002\000\056\026" +
    "\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b" +
    "\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045" +
    "\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\054\uff9b\055\uff9b" +
    "\056\uff9b\057\uff9b\001\002\000\020\014\145\027\157\032" +
    "\153\061\144\062\160\063\147\064\127\001\002\000\006" +
    "\030\uffb3\057\uffb3\001\002\000\060\025\217\026\uff97\030" +
    "\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97\037\uff97" +
    "\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046" +
    "\uff97\047\uff97\050\uff97\051\uff97\054\uff97\055\uff97\056\uff97" +
    "\057\uff97\001\002\000\020\014\145\027\157\032\153\061" +
    "\144\062\160\063\147\064\127\001\002\000\004\026\221" +
    "\001\002\000\056\026\uff96\030\uff96\031\uff96\032\uff96\033" +
    "\uff96\034\uff96\035\uff96\037\uff96\040\uff96\041\uff96\042\uff96" +
    "\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051" +
    "\uff96\054\uff96\055\uff96\056\uff96\057\uff96\001\002\000\030" +
    "\004\uffc7\007\uffc7\010\uffc7\012\uffc7\013\uffc7\015\uffc7\017" +
    "\uffc7\020\uffc7\023\uffc7\024\uffc7\064\uffc7\001\002\000\020" +
    "\014\145\027\157\032\153\061\144\062\160\063\147\064" +
    "\127\001\002\000\006\030\uffbe\057\225\001\002\000\004" +
    "\063\231\001\002\000\004\030\227\001\002\000\004\056" +
    "\230\001\002\000\030\004\uffc3\007\uffc3\010\uffc3\012\uffc3" +
    "\013\uffc3\015\uffc3\017\uffc3\020\uffc3\023\uffc3\024\uffc3\064" +
    "\uffc3\001\002\000\004\030\uffbf\001\002\000\020\014\145" +
    "\027\157\032\153\061\144\062\160\063\147\064\127\001" +
    "\002\000\006\030\251\054\252\001\002\000\012\030\uffa9" +
    "\054\uffa9\055\uffa9\056\uffa9\001\002\000\026\030\uffa8\044" +
    "\244\045\241\046\243\047\246\050\242\051\245\054\uffa8" +
    "\055\uffa8\056\uffa8\001\002\000\012\030\uffab\054\uffab\055" +
    "\237\056\uffab\001\002\000\020\014\145\027\157\032\153" +
    "\061\144\062\160\063\147\064\127\001\002\000\012\030" +
    "\uffaa\054\uffaa\055\uffaa\056\uffaa\001\002\000\020\014\uff90" +
    "\027\uff90\032\uff90\061\uff90\062\uff90\063\uff90\064\uff90\001" +
    "\002\000\020\014\uff8f\027\uff8f\032\uff8f\061\uff8f\062\uff8f" +
    "\063\uff8f\064\uff8f\001\002\000\020\014\uff8e\027\uff8e\032" +
    "\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e\001\002\000\020" +
    "\014\uff91\027\uff91\032\uff91\061\uff91\062\uff91\063\uff91\064" +
    "\uff91\001\002\000\020\014\uff8d\027\uff8d\032\uff8d\061\uff8d" +
    "\062\uff8d\063\uff8d\064\uff8d\001\002\000\020\014\uff8c\027" +
    "\uff8c\032\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\001\002" +
    "\000\020\014\145\027\157\032\153\061\144\062\160\063" +
    "\147\064\127\001\002\000\012\030\uffa7\054\uffa7\055\uffa7" +
    "\056\uffa7\001\002\000\024\004\141\007\136\012\130\013" +
    "\132\015\135\017\125\020\137\023\126\064\127\001\002" +
    "\000\020\014\145\027\157\032\153\061\144\062\160\063" +
    "\147\064\127\001\002\000\012\030\uffac\054\uffac\055\237" +
    "\056\uffac\001\002\000\030\004\uffc1\007\uffc1\010\255\012" +
    "\uffc1\013\uffc1\015\uffc1\017\uffc1\020\uffc1\023\uffc1\024\uffc1" +
    "\064\uffc1\001\002\000\024\004\141\007\136\012\130\013" +
    "\132\015\135\017\125\020\137\023\126\064\127\001\002" +
    "\000\030\004\uffc0\007\uffc0\010\uffc0\012\uffc0\013\uffc0\015" +
    "\uffc0\017\uffc0\020\uffc0\023\uffc0\024\uffc0\064\uffc0\001\002" +
    "\000\020\014\uff92\027\uff92\032\uff92\061\uff92\062\uff92\063" +
    "\uff92\064\uff92\001\002\000\020\014\uff93\027\uff93\032\uff93" +
    "\061\uff93\062\uff93\063\uff93\064\uff93\001\002\000\020\014" +
    "\145\027\157\032\153\061\144\062\160\063\147\064\127" +
    "\001\002\000\004\056\271\001\002\000\020\014\uff94\027" +
    "\uff94\032\uff94\061\uff94\062\uff94\063\uff94\064\uff94\001\002" +
    "\000\006\030\uffb7\056\uffb7\001\002\000\006\030\uffb6\056" +
    "\uffb6\001\002\000\022\014\145\027\157\030\uffb4\032\153" +
    "\061\144\062\160\063\147\064\127\001\002\000\004\030" +
    "\270\001\002\000\006\030\uffb8\056\uffb8\001\002\000\030" +
    "\004\uffcb\007\uffcb\010\uffcb\012\uffcb\013\uffcb\015\uffcb\017" +
    "\uffcb\020\uffcb\023\uffcb\024\uffcb\064\uffcb\001\002\000\006" +
    "\030\uffb9\056\uffb9\001\002\000\006\056\uffbc\064\127\001" +
    "\002\000\024\027\266\036\263\037\201\040\177\041\165" +
    "\042\166\043\172\052\265\053\264\001\002\000\004\056" +
    "\276\001\002\000\022\014\145\027\157\032\153\056\uffba" +
    "\061\144\062\160\063\147\064\127\001\002\000\004\056" +
    "\301\001\002\000\006\054\252\056\uffbb\001\002\000\006" +
    "\030\uffbc\064\127\001\002\000\004\030\303\001\002\000" +
    "\024\004\141\007\136\012\130\013\132\015\135\017\125" +
    "\020\137\023\126\064\127\001\002\000\030\004\uffc9\007" +
    "\uffc9\010\uffc9\012\uffc9\013\uffc9\015\uffc9\017\uffc9\020\uffc9" +
    "\023\uffc9\024\uffc9\064\uffc9\001\002\000\006\030\uffbd\056" +
    "\uffbd\001\002\000\072\025\310\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\060\311\001\002\000\072" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050" +
    "\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0" +
    "\057\uffb0\060\uffb0\001\002\000\020\014\145\027\157\032" +
    "\153\061\144\062\160\063\147\064\127\001\002\000\004" +
    "\064\312\001\002\000\072\025\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae" +
    "\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045" +
    "\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae" +
    "\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\001\002\000" +
    "\004\026\314\001\002\000\072\025\uffad\026\uffad\027\uffad" +
    "\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053" +
    "\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\001\002" +
    "\000\026\004\141\007\136\012\130\013\132\015\135\017" +
    "\125\020\137\023\126\024\316\064\127\001\002\000\030" +
    "\004\uffc2\007\uffc2\010\uffc2\012\uffc2\013\uffc2\015\uffc2\017" +
    "\uffc2\020\uffc2\023\uffc2\024\uffc2\064\uffc2\001\002\000\004" +
    "\064\127\001\002\000\004\030\321\001\002\000\004\056" +
    "\322\001\002\000\030\004\uffc4\007\uffc4\010\uffc4\012\uffc4" +
    "\013\uffc4\015\uffc4\017\uffc4\020\uffc4\023\uffc4\024\uffc4\064" +
    "\uffc4\001\002\000\004\060\100\001\002\000\012\021\054" +
    "\022\uffd9\024\325\064\uffd9\001\002\000\004\002\001\001" +
    "\002\000\006\056\331\057\330\001\002\000\006\056\ufff1" +
    "\057\ufff1\001\002\000\004\064\114\001\002\000\016\005" +
    "\ufff3\006\ufff3\021\ufff3\023\ufff3\024\ufff3\064\ufff3\001\002" +
    "\000\006\056\ufff2\057\ufff2\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\004\070\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\006\001\001\000\014\002\014" +
    "\036\013\043\015\057\010\073\007\001\001\000\006\037" +
    "\325\040\326\001\001\000\002\001\001\000\004\011\323" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\073\020" +
    "\001\001\000\006\042\022\044\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\035\001\001\000" +
    "\002\001\001\000\004\073\037\001\001\000\002\001\001" +
    "\000\004\076\041\001\001\000\004\004\042\001\001\000" +
    "\012\003\045\010\047\036\046\073\007\001\001\000\004" +
    "\011\052\001\001\000\006\036\051\073\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\055\062\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\073\057\074\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\035\070\045\071\046\066\047\067\073\065\001\001\000" +
    "\004\073\322\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\045\075\073\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\106\001\001\000\006\012\111\073\110\001\001\000\004" +
    "\077\122\001\001\000\006\014\112\040\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\123\001\001\000\010\017\130\050\132\052\133\001" +
    "\001\000\002\001\001\000\004\051\314\001\001\000\004" +
    "\021\305\001\001\000\002\001\001\000\012\022\261\026" +
    "\257\033\256\064\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\017\145\027\147\030\142\034\153\071\151" +
    "\072\154\075\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\073\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\203\026\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\145\027\147\030\174\034" +
    "\153\072\154\075\155\001\001\000\006\032\170\033\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\017" +
    "\145\027\147\030\142\034\153\071\160\072\154\075\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\145\034\153\072\173" +
    "\075\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\145\075\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\145\027\147\030\205\034\153\072\154\075\155" +
    "\001\001\000\012\017\145\034\153\072\204\075\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\017\145" +
    "\027\147\030\142\034\153\065\207\066\210\071\211\072" +
    "\154\075\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\017\145\027" +
    "\147\030\142\034\153\071\214\072\154\075\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\017\145\027" +
    "\147\030\142\034\153\071\217\072\154\075\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\017\145\027\147\030\142\034\153\071\223\072\154" +
    "\075\155\001\001\000\004\063\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\017\145\027\147\030\142\034" +
    "\153\053\232\054\235\055\233\071\234\072\154\075\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\246\001\001\000\002\001\001\000\022\017\145\027\147" +
    "\030\142\034\153\055\237\071\234\072\154\075\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\017\145\027\147\030\142\034\153" +
    "\071\247\072\154\075\155\001\001\000\002\001\001\000" +
    "\010\017\130\050\253\052\133\001\001\000\024\017\145" +
    "\027\147\030\142\034\153\054\252\055\233\071\234\072" +
    "\154\075\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\130\050\255\052\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\017\145" +
    "\027\147\030\142\034\153\071\271\072\154\075\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\017\145\027\147\030\142\034" +
    "\153\065\207\066\266\071\211\072\154\075\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\273\020\274\001\001\000\012" +
    "\022\304\026\257\033\256\064\260\001\001\000\002\001" +
    "\001\000\030\017\145\027\147\030\142\034\153\053\277" +
    "\054\235\055\233\056\276\071\234\072\154\075\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\273" +
    "\020\301\001\001\000\002\001\001\000\010\017\130\050" +
    "\303\052\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\306\001\001\000\002\001\001\000\020\017" +
    "\145\027\147\030\142\034\153\071\312\072\154\075\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\130\050\132\052\133" +
    "\001\001\000\002\001\001\000\004\017\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\055\062\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\331" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    Symbol s = this.getScanner().next_token();
    if (s != null && s.value != null) 
        log.info(s.toString() + " " + s.value.toString());
    return s;

    }


    public static enum SCOPE
    {
        GLOBAL_SCOPE,
        METHOD_SCOPE,
        CLASS_SCOPE,
        CLASS_METHOD_SCOPE,
        MAIN_SCOPE
    }
    
    SCOPE currentScope = SCOPE.GLOBAL_SCOPE;
    
    int globalVariableCount = 0;
    int globalConstVariableCount = 0;
    int mainVariableCount = 0;
    int globalClassFunctionCount = 0;
    int staticClassFunctionCount = 0;
    int formalParamsCount = 0;
    int globalFunctionCount = 0;
    int classCount = 0;
    int classVariableCount = 0;
    
    void IncreaseVariableCount()
    {
        if (currentScope == SCOPE.GLOBAL_SCOPE) 
        {
            globalVariableCount++;
            return;
        }
        if (currentScope == SCOPE.MAIN_SCOPE)
        {
            mainVariableCount++;
            return;
        }
        if (currentScope == SCOPE.CLASS_SCOPE)
        {
            classVariableCount++;
        }
    }
    
    void IncreaseConstVariableCount()
    {
        if (currentScope == SCOPE.GLOBAL_SCOPE)
        {
            globalConstVariableCount++;
        }
    }
    
    void IncreaseStaticFunctionNumber()
    {
        if (currentScope == SCOPE.CLASS_SCOPE)
        {
            staticClassFunctionCount++;
        }
        /*if (currentScope == SCOPE.GLOBAL_SCOPE)
        {
            globalFunctionCount++;
        }*/
    }
    
    void IncreaseFunctionNumber()
    {
        if (currentScope == SCOPE.CLASS_SCOPE)
        {
            globalClassFunctionCount++;
        }
        if (currentScope == SCOPE.GLOBAL_SCOPE)
        {
            globalFunctionCount++;
        }
        
    }
    
    void InScope(SCOPE newScope)
    {
        if (currentScope == SCOPE.CLASS_SCOPE && newScope == SCOPE.METHOD_SCOPE)
        {
            currentScope = SCOPE.CLASS_METHOD_SCOPE;
            return;
        }
        currentScope = newScope;   
    }
    
    void OutOfCurrentScope()
    {
        if (currentScope == SCOPE.CLASS_METHOD_SCOPE)
        {
            currentScope = SCOPE.CLASS_SCOPE;
            return;
        }
        currentScope = SCOPE.GLOBAL_SCOPE;
    }
    
    Logger log = Logger.getLogger(getClass());

    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder(message); 
        if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
        StringBuilder msg = new StringBuilder(message); 
        if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // MulopRight ::= ASSIGN_MOD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // MulopRight ::= ASSIGN_DIV 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // MulopRight ::= ASSIGN_MUL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // MulopLeft ::= MOD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // MulopLeft ::= DIV 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // MulopLeft ::= MUL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Mulop ::= MulopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Mulop ::= MulopLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // AddopRight ::= ASSIGN_SUB 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // AddopRight ::= ASSIGN_ADD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // AddopLeft ::= SUB 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // AddopLeft ::= ADD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Addop ::= AddopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Addop ::= AddopLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Relop ::= LESS_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Relop ::= LESS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Relop ::= GREATER_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Relop ::= GREATER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Relop ::= NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Relop ::= EQUAL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Assignop ::= MulopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Assignop ::= AddopRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Assignop ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Factor ::= LPAREN Expression RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Factor ::= NEW Type LBRACK Expression RBRACK 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Factor ::= NEW Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Factor ::= BOOL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Factor ::= CHAR 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Factor ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Factor ::= Designator LPAREN ActParsListOpt RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Factor ::= Designator 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // MulopFactorList ::= Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopFactorList",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MulopFactorList ::= MulopFactorList MulopLeft Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopFactorList",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Term ::= MulopFactorList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Term ::= MulopFactorList MulopRight Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // AddopTermList ::= Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTermList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // AddopTermList ::= AddopTermList AddopLeft Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTermList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // AddopTermCombList ::= AddopTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTermCombList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // AddopTermCombList ::= AddopTermList AddopRight AddopTermCombList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTermCombList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expression ::= AddopTermCombList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expression",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expression ::= SUB AddopTermCombList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expression",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CondFact ::= Expression Relop Expression 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CondFact ::= Expression 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CondTerm ::= CondTerm AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Condition ::= CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Condition ::= Condition OR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DesignatorIdent ::= LBRACK Expression RBRACK 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorIdent",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DesignatorIdent ::= DOT IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorIdent",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DesignatorListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorListOpt",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DesignatorListOpt ::= DesignatorListOpt DesignatorIdent 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorListOpt",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Designator ::= IDENT DesignatorListOpt 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ActPars ::= Expression 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ActPars ::= ActPars COMMA Expression 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ActParsListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsListOpt",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ActParsListOpt ::= ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsListOpt",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DesignatorStatement ::= DEC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DesignatorStatement ::= INC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DesignatorStatement ::= LPAREN ActParsListOpt RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DesignatorStatement ::= Assignop Expression 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CondOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondOpt",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CondOpt ::= Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondOpt",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DesignatorOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorOpt",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DesignatorOpt ::= Designator DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorOpt",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NumOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumOpt",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NumOpt ::= COMMA NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumOpt",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // StatementIfElse ::= IF LPAREN Condition RPAREN Statement ELSE Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementIfElse",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // StatementIfElse ::= IF LPAREN Condition RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementIfElse",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Statement ::= LBRACE StatementListOpt RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Statement ::= PRINT LPAREN Expression NumOpt RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Statement ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Statement ::= RETURN Expression SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Statement ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Statement ::= CONTINUE SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Statement ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Statement ::= FOR LPAREN DesignatorOpt SEMI CondOpt SEMI DesignatorOpt RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Statement ::= StatementIfElse 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Statement ::= Designator DesignatorStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // StatementListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementListOpt",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // StatementListOpt ::= StatementListOpt Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementListOpt",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormalParamDecl ::= Type IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormalParamDecl ::= Type IDENT LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormalParamList ::= FormalParamDecl 
            {
              Object RESULT =null;
		 parser.formalParamsCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FormalParamList ::= FormalParamList COMMA FormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FormParamsOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamsOpt",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FormParamsOpt ::= VarArgs 
            {
              Object RESULT =null;
		 parser.formalParamsCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamsOpt",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FormParamsOpt ::= FormalParamList VarArgs 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamsOpt",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FormParamsOpt ::= FormalParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamsOpt",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VarArgs ::= COMMA Type DOT DOT DOT IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarArgs",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TypeVoid ::= VOID 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeVoid",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TypeVoid ::= Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeVoid",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // StaticOpt ::= 
            {
              Object RESULT =null;
		 parser.IncreaseFunctionNumber(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticOpt",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // StaticOpt ::= STATIC 
            {
              Object RESULT =null;
		 parser.IncreaseStaticFunctionNumber(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticOpt",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodDecl ::= StaticOpt TypeVoid IDENT LPAREN FormParamsOpt RPAREN MethodVarDeclListOpt LBRACE NT$1 StatementListOpt RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.OutOfCurrentScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$1 ::= 
            {
              Object RESULT =null;
 
    parser.InScope(SCOPE.METHOD_SCOPE);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MethodDeclListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclListOpt",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MethodDeclListOpt ::= MethodDeclListOpt MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclListOpt",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MethodDeclOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclOpt",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MethodDeclOpt ::= LBRACE MethodDeclListOpt RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclOpt",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MethodIdentList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodIdentList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MethodIdentList ::= MethodIdentList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodIdentList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MethodVarDecl ::= Type MethodIdentList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarDecl",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MethodVarDeclListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarDeclListOpt",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MethodVarDeclListOpt ::= MethodVarDeclListOpt MethodVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarDeclListOpt",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ExtendsOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsOpt",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ExtendsOpt ::= EXTENDS Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsOpt",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ClassDecl ::= CLASS IDENT ExtendsOpt LBRACE NT$0 ClassVarDeclListOpt MethodDeclOpt RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 parser.OutOfCurrentScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$0 ::= 
            {
              Object RESULT =null;
 
    parser.InScope(SCOPE.CLASS_SCOPE);
    parser.classCount++;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ClassVarDecl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ClassVarDecl ::= STATIC VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ClassVarDeclListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclListOpt",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ClassVarDeclListOpt ::= ClassVarDeclListOpt ClassVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDeclListOpt",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Var ::= IDENT 
            {
              Object RESULT =null;
		 parser.IncreaseVariableCount(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Var ::= IDENT LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDeclList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDeclList ::= VarDeclList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDecl ::= Type VarDeclList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Const ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Const ::= CHAR 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Const ::= BOOL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstIdent ::= IDENT ASSIGN Const 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstIdent",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDeclList ::= ConstIdent 
            {
              Object RESULT =null;
		 parser.IncreaseConstVariableCount(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstDeclList ::= ConstDeclList COMMA ConstIdent 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ConstDecl ::= CONST Type ConstDeclList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclListOpt",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclListOpt ::= DeclListOpt Decl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclListOpt",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG IDENT DeclListOpt LBRACE MethodDeclListOpt RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

