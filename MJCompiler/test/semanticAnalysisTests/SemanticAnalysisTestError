program MJProgram
	int global, globalComma , uniqueGlobal;
	int globalArray[], glovalInt, globalArray2[];
	bool uniqueBool = 'c';
	const int constA = 3;
{
	
	int retConstNum()
	int a,b = 'c' ;
	{
		return 1;
	}
	
	bool retConstBool(int i, bool p, char c)
	{
		print(i, 'c');
		return false;
	}
	
	 void retVoid()
	 int a,b;
	 {
	 	return;
	 }
	
	const int retConstChar()
	{
		return 3;
	}
	
	const int[] retNew()
	{
		return new int; // is this ok ?
	}
	
	const int[] retNew2()
	{
		return new int[3]; // is this ok ?
	}
	
	int retArrayElement(int t, const int g)
	const int a[], b;
	{
		return a[t];
	}
	
	int k () int c;
	int t; 
	int g[];
	{
		g = new int[4];
		g[1] = 1;
		g[2] = t;//'c';
		g[3] = 3;

		t = 1;
		read(c);
		t;
		t++;
		c = (1 + 4*3) - 2%2 + t++/2 + t--;
		retConstNum();

		print(t--, 1);
		print(g[3]+3);
		print(retConstNum());
		
		c = (retConstNum()) + 3;
		retArrayElement(2, c);
		return c + 2 - (retConstNum());
	}
	
	char arrayErrorTesting()
	int k[],z[],h,d[];
	char a[],g[],c,j[]; // he thinks these are int hmm..
	bool b[],x,c[],v[];
	{
		c = 3;
		b = new int[c];
		j = new char[4];
		z = new bool[c+3];
		b = true;
		
		b[1] = 3; b[2] = 1;
		j[1] = 'a'; j[3] = 'k';
		z[2] = true; z[0] = false;
		
		return b[2];
	}
	
	int ErrorRecoveryParameter()
	int t;
	{
		t = t + 2 - 4; // recovery
		return 'c';
	}
	
	void WrongReturnVoidInt()
	{
		return 1;
	}
	
	const int WrongReturnTypeIntChar()
	{
		return 'a';// -> error recovery
	}
	
	void WrongAssignType(int a, int b)
	char c, d;
	bool k, g; 
	{
		globalComma = c;
		a = c; 
		d = b;
		c = b;
		c = d;
		k = g;
		a = b;
	}
	
	void IncompatibleTypesWhileAdditionAndMultiplication()
	int int1, int2, int3;
	bool bool1, bool2, bool3;
	char char1,char2,char3;
	{
		int1 = int2 + bool1;
		int2 = (char1 + bool2) - int3;
		int3 = int1 * int2 + int2*char1;
		
		int2 = char1*char2;
	}
	
	void FunctionCallOnNonFunction()
	int arrayA[], intVarB, c;
	{
		intVarB();
		arrayA();
		c(1, 2, 3);
	}
	
	NotExistingType returnTypeNotType()
	{
		return 'c';
	}
	
	global returnTypeVariable()
	{
		return 1;
	}
	
	void UsingOfUndeclaredVariable()
	{
		notDeclaredVariable = 2;
	}
	int NoReturnFunctionError()
	{
	
	}
	
	int ReturnWithNoTypeError(int a, int b, int c)
	{
		return;
	}
	
	int FiveParams(int a1, int a2, int a3, int a4, int a5)
	{
		return (a1+a1)*a2-a3+a4*a5;
	}
	
	int CallWithTooManyParams()
	{
		return FiveParams(1, 2, 3, 4, 5, 6);
	}
	
	int CallWithTooLittleParams()
	{
		return FiveParams(1, 2, 3, 4);
	}
	
	int ReturnWrongParams()
	{
		return FiveParams(1, '2', 3, true, 5);
	}
	
	void SameNameMethod() {}
	void SameNameMethod() {}
	
	char CharPostIncrement()
	char a;
	{
		a--; // Statement
		return a--; // Expression
	}
	
	char retChar()
	{
		return 'c';
	}
	
	int FunctionReturningCharFCall(int a, int b)
	int global;
	{
		return retChar();
	}
	
	void FunctionMultipleSameDefinedFormalParams(int a, int global, int a)
	int same;
	int same;
	{
		return;
	}
	
	int main(){ return 1;}
	
	void VoidFunction(){
	}
	
	void functionOfVoidInExpression() int krkkk;
	{
		krkkk = 10;
		krkkk = krkkk + 2*5 - VoidFunction();
	}
	
	void wrongDefaultAssign() int a = true;
	{
	
	}
	
	void assigningToConstValue() const int k = 3, t=3, p=0;
	{
		constA = 4;
		k = 8;
		p = 2;
	}
	
	void PostfixOperationOnNonIntegerTypeError() char t;
	{
		t = 'a';
		t++;
	}
	
	int printStmtOnNonCharOrIntType()
	{
		print(true);
		return -1;
	}
	
	char readStmtOnNonIntCharType() bool wrongType;
	{
		read(wrongType);
		return 'a';
	}

	void errorRecoveryAssign() int assignErrorRecovery;
	{
		assignErrorRecovery = +3;
	}
}