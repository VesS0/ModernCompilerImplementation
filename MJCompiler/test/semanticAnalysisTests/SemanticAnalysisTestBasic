program MJProgram
	int global, globalComma = 3, uniqueInt;
	int globalArray[], glovalInt, globalArray2[];
	bool uniqueBool = true;
{	
	int retConstNum()
	int a,b = 1;
	int global;
	{
		return 1;
	}
	
	bool retBool(int i, bool p, char c) bool anotherDefault = true;
	{
		return false;
	}
	
	const int[] retNew()
	{
		return new int[3];
	}
	
	char returnChar()
	{
		return 'c';
	}
	
	int retArrayElement(int t, const int g)
	const int a[], b=2;
	{
		return a[t];
	}
	
	int k () int c;
	int t; 
	int g[];
	{
		g = new int[4];
		g[1] = 1;
		g[2] = 3;
		g[3] = 2; 
		
		t = 1;
		read(c);
		t;
		t++;
		c = (1 + 4*3) - 2%2 + t++/2 + t--;
		retConstNum();

		print(t--, 1);
		print(g[3]+3);
		print(retConstNum());
		
		c = (retConstNum()) + 3; // Function calls per specification should only work when they are alone surrounded 
		retArrayElement(2, c);
		return c + 2 - (retConstNum());
	}
	
	char arrayTesting()
	int a[],b[],c,d[];
	char k[],g[],h = 'c',j[];
	bool z[],x,xx[],v[]; 
	{
		c = 3;
		b = new int[c];
		j = new char[4];
		z = new bool[c+3];
		
		b[1] = 3; b[2] = 1;
		j[1] = 'a'; j[3] = 'k';
		z[2] = true; z[0] = false;
		
		return g[2];
	}
	
	void NoReturn()
	{
	}
	
	void YesReturn()
	{
		return;
	}
	
	void SameNameMethodDifferentSignature(){}
	// void SameNameMethodDifferentSignature(int a, int b){}
	// int  SameNameMethodDifferentSignature() {return 1;}
	
	int s1()
	int a,b,c;
	{return 0;}
	int s2()
	{return 0;}
	int s3(int a)
	{ return a;}
	int s4(char b, int a)
	char k;
	{return a; }
	
	int s5(char chh)
	int a;
	{ return a;}
	
	int s6(bool b)
	char k;
	{return 33+22; }
	
	int callFunc()
	int a;
	bool vl;
	{
		a = s1();
		a = (s2()) + (s3(1));
		a = s5('k') + s6(true);
		return a + s4('c', 2) * s1();
	}
	
	// int callFunc()
	// bool vl;
	// { return s1() + s2() + s3(1) + s4('c', 2) + s5('k'); }
	
	int FunctionCalled(int aaa, int bbb, char ccc, bool ddd, int eee, char fff, bool ggg, bool arrrr[], bool kkk)
	{
		return aaa + bbb*eee;
	}
	
	int FunctionCaller()
	int a,b,e;
	bool d;
	char c;
	char f;
	bool g, kkk[];
	{
		a= 3;
		a--;
		d = true;
		c = 'k';
		
		return FunctionCalled(a++, 2, c, d, 2*a, 'c', false, kkk, kkk[2]);
	}
	void main(){}
}