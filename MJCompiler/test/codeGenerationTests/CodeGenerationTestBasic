program VesicTest
bool vlada = true;
const bool marko = true;
int globalIntArr[]; bool globalBoolArr[]; char globalCharArr[];
int x = 2, y;
{

	void boolTestFunctionLocalGlobalConst()  bool testVlada; const int k = 4; const bool testMarko = true; bool mirko = true;
	{
		testVlada = mirko;
		testVlada = true;
		testVlada = vlada;
		print(k);
		mirko = vlada;
		mirko = false;
		mirko = testMarko;
		mirko = false;
		mirko = marko;
	}
	
	void printChars() char cha = 'a', chb='b', chc='c';
	{
		cha = 'a';
		print('c'); // c
		print(cha); // a 
		print(chb); // b
		print(chc); // c
	}
	
	int incrementDecrementTestSuccessful()
	int dec, inc = 3; int kdec=5, kinc;
	{
		dec = 0;
		kinc = dec;
		dec--; inc++;
		inc++; inc--;
		
		dec = dec-- + inc++ + inc++; // expected 8
		inc = dec-- - inc++; // expected 2
		return inc + dec; // expected 9
	}
	
	int printTest() int c,k; 
	bool vlada = true;
	{
		x = 30 + 3 + x;
		c = 1 + 2*3 + (1+1)*(1+1)+2;
		vlada = false;
		vlada = true;
		
		print(x); // 35
		print(8%3); //2
		printChars();

		print(c); //13
			
		return x-c*2; // 9
	}
	
	int functionCallWithParams(int one,int k, int global, char c,bool tru)
	{
		print(one); // 1
		print(k); // 2
		print(global); //2 
		print(c); // c
		return k + one % 2;
	}
	
	void parameterArrayTesting(int intArr[], char a, bool t, char d, char charAr[], int tes)
	char localArr[];
	{
		print(intArr[9]); // 5
		print(a); // a
		print(d); //  d
		print(charAr[4]); // a
		
		localArr = new char[tes+10]; // t + 10 not working...
		localArr[tes-3] = 'V';
		localArr[tes-2] = 'E';
		localArr[tes-1] = 'S';
		localArr[tes] =   'I';
		localArr[tes+1] = 'C';
		// print(t++);
		print(localArr[tes-3]); // V
		print(localArr[tes-2]); // E
		print(localArr[tes-1]); // S
		print(localArr[tes]); // I
		print(localArr[tes+1]); // C
	}
	
	void TestingArrays(int t) int arr[],a; bool arBool[]; char arChar[]; char testing;
	{
		arr = new int[3];
		a = 5;
		arr[2] = 1;
		
		
		arr[1] = 3;
		arr[0] = a;
		
		arBool = new bool[3];
		arBool[0] = true; arBool[1] = false;
		
		arChar = new char[1];
		
		print(arr[0]); // 5
		print(arr[2]); // 1
		arChar[0] = 'd';
		
		globalIntArr = new int[10];
		globalCharArr = new char[5];
		globalBoolArr = new bool[2];
		
		globalIntArr[9] = 5;
		globalCharArr[4] = 'a';
		globalBoolArr[0] = true;
		testing = globalCharArr[4];
		
		parameterArrayTesting(globalIntArr, globalCharArr[4], globalBoolArr[0], arChar[0], globalCharArr, t);
	}
	
	void TestingIncerementDecrementOnArrays()
	int x,y,z;
	int xAr[], yAr[], zAr[];
	{
		read(x); // 3
		read(y); // 1
		read(z); // 2
		
		xAr= new int[10]; yAr= new int[10]; zAr= new int[10];
		
		xAr[0] = x; //3
		yAr[1] = y + x;
		zAr[2] = xAr[0] + yAr[1];
		
		print(xAr[0]); // 3
		print(yAr[1]); // 4
		print(zAr[2]); // 7
		
		xAr[0]--; //2
		yAr[1] = yAr[1]-- - zAr[2]++;
		print(xAr[0]); // 2
		print(yAr[1]); //-3
		print(zAr[2]); //8
		
		yAr[3] = 1;
		
		x = xAr[0]; // 2
		y = xAr[yAr[3]-1]; //2
		print(y); //2
		zAr[xAr[yAr[3]-1]]--; // 7
		print(zAr[xAr[yAr[3]-1]]--); // 7
	}
	
	void TestMulAndAddops()int k;
	{
		k = -2;
		print(k); //-2
		k = -7*2/2+8-2*4+(1+1)/2-4*3*2+2*(3-2)/2;
		print(k); //-29
		k = -(3/(2-5))*8/2;
		print(k); // 4
		k = -1+3 -3 - 5*2; // He takes 3 - 10 = -7. After this he sees -3 and does 3 - -7 and gets 10...
		print(k); // -11
		k = -2*3;
		print(k); //-6
		k = -3-4*5-2-3*2+40-(3*3-2*3)-(-(3));
		print(k); //9
	}
	
	void main() int k = 2, t; char c;
	{
		read(c);
		print(c);
		print(incrementDecrementTestSuccessful()); // expected 9
		TestingIncerementDecrementOnArrays(); // 3, 4, 7, 2, -3, 8, 2, 7,
		functionCallWithParams(1, k, x, 'c', true); // 1, 2, 2, c
		read(t); //3  or more!
		print(t);
		TestingArrays(t); // 5, 1, 5, a, d, a, V E S I C

		TestMulAndAddops(); // -2, -29, 4, -11, -6, 9
	
		y = printTest(); // 35, 2, c, a ,b ,c, 13
		print(y); // 9
		print((y + 1 + k)); // 12
		boolTestFunctionLocalGlobalConst(); //4
		print(x); // 35
	}
	
	void testIfElse() bool vlada= true;	int x = 3;
	int y = 2;
	{
		if (vlada)
			print(x);
		else
			print(y);
		
		vlada = false;
		
		if (vlada)
		{
			x = 10;
		}
		
		if (vlada)
		{
			print(-1);
			print(x - 1);
		}
		else
		{
			print(y - 1);
		}
	}
	
	void moreSimpleIfElseConditions() bool vlada= true, vesic = false;
	{
		if (vlada)
		{
			print('v');
			if (vlada)
			{
				print('l');
				if (vlada)
				{
					vlada = false;
					print('a');
				}
				print('d');
				if (vlada)
				{
					vlada = false;
				}
				else
				{
					print('a');
					if (vlada)
					{
						vlada = false;
					}
					else
					{
						print(' ');
						vlada = true;
					}
					print('v');
				}
			print('e');
			}
			else
			{
				vesic = true;
			}
			print('s');
		}
		else
		{
			if (vesic)
			{
				vlada = true;
			}
		}
		vesic = true;
		print('i');
		if (vesic)
			if (vesic)
				if (vesic)
					if (false) print('K');
					else print('c');
		print('d');
		if (true)
			print('a');
	}
}