program VesicTest
int globalIntArr[]; bool globalBoolArr[]; char globalCharArr[];
int x = 2, y;
{
	void printChars() char cha = 'a', chb='b', chc='c';
	{
		cha = 'a';
		print('c');
		print(cha);
		print(chb);
		print(chc);
	}
	
	int incrementDecrementTestSuccessful()
	int dec, inc = 3; int kdec=5, kinc;
	{
		dec--; inc++;
		inc++; inc--;
		
		dec = dec-- + inc++ + inc++; // expected 8
		inc = dec-- - inc++; // expected 2
		return inc + dec; // expected 9
	}
	
	int printTest() int c,k; 
	bool vlada = true;
	{
		x = 30 + 3 + x;
		c = 1 + 2*3 + (1+1)*(1+1)+2;
		// print(incrementDecrementTestSuccessful());
		vlada = false;
		vlada = true;
		
		print(x); //35 // err 33
		print(8%3); //2
		printChars();

		print(c); //12
		// print('k');
			
		return x-c*2; //35 - 24 (err 9) 
	}
	
	int functionCallWithParams(int one,int k, int global, char c,bool tru)
	{
		print(one);
		print(k);
		print(global);
		print(c);
		return k + one % 2;
	}
	
	void parameterArrayTesting(int intArr[], char a, bool t, char d, char charAr[], int tes)
	char localArr[];
	{
		print(intArr[9]);
		print(a);
		print(d);
		print(charAr[4]);
		
		localArr = new char[tes+10]; // t + 10 not working...
		localArr[tes-3] = 'V';
		localArr[tes-2] = 'E';
		localArr[tes-1] = 'S';
		localArr[tes] =   'I';
		localArr[tes+1] = 'C';
		// print(t++);
		print(localArr[tes-3]);
		print(localArr[tes-2]);
		print(localArr[tes-1]);
		print(localArr[tes]);
		print(localArr[tes+1]);
	}
	
	void TestingArrays(int t) int arr[],a; bool arBool[]; char arChar[]; char testing;
	{
		arr = new int[3];
		a = 5;
		arr[2] = 1;
		
		
		arr[1] = 3;
		// arr[0] = a;
		
		arBool = new bool[3];
		arBool[0] = true; arBool[1] = false;
		
		arChar = new char[1];
		
		print(arr[0]);
		print(arr[2]);
		arChar[0] = 'd';
		
		globalIntArr = new int[10];
		globalCharArr = new char[5];
		globalBoolArr = new bool[2];
		
		globalIntArr[9] = 5;
		globalCharArr[4] = 'a';
		globalBoolArr[0] = true;
		testing = globalCharArr[4];
		
		parameterArrayTesting(globalIntArr, globalCharArr[4], globalBoolArr[0], arChar[0], globalCharArr, t);
	}
	
	void TestingIncerementDecrementOnArrays()
	int x,y,z;
	int xAr[], yAr[], zAr[];
	{
		read(x); // 3
		read(y); // 1
		read(z); // 2
		
		xAr= new int[10]; yAr= new int[10]; zAr= new int[10];
		
		xAr[0] = x; //3
		yAr[1] = y + x;
		zAr[2] = xAr[0] + yAr[1];
		
		print(xAr[0]); // 3
		print(yAr[1]); // 4
		print(zAr[2]); // 7
		
		xAr[0]--; //2
		yAr[1] = yAr[1]-- - zAr[2]++;
		print(xAr[0]);
		print(yAr[1]);
		print(zAr[2]);
		
		yAr[3] = 1;
		
		x = xAr[0];
		y = xAr[yAr[3]-1];
		print(y);
		zAr[xAr[yAr[3]-1]]--;
		print(zAr[xAr[yAr[3]-1]]);
	}
	
	void main() int k = 2, t;
	{
		print(incrementDecrementTestSuccessful()); // expected 9
		TestingIncerementDecrementOnArrays();
		//functionCallWithParams(1, k, x, 'c', true);
		// read(t); //3  or mnore!
		// print(t);
		// TestingArrays(t);

		
	
		//y = printTest();
		//print(y); // 11 // err 9
		//print((y + 1 + k)); // 2 // err 12
	}
}